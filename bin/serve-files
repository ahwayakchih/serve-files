#!/usr/bin/env node

const http        = require('http');
const path        = require('path');
const serveFiles  = require('../index.js');
const connections = require('../lib/getSetOfSockets.js')();

const CONFIG = serveFiles.parseArguments(process.argv);
const CACHE_TIME = 3600;

if (CONFIG.usageText !== null) {
	console.log(`USAGE: ${path.basename(module.filename)} ${CONFIG.usageText}\n`);
	process.exit(0); // eslint-disable-line no-process-exit
}

const server = http.createServer(serveFiles.createFileResponseHandler({
	documentRoot       : CONFIG.documentRoot,
	followSymbolicLinks: false,
	cacheTimeInSeconds : CACHE_TIME
}));

server.listen(CONFIG.port, CONFIG.hostname, null, onServerListening);

// Keep track of connections, to enforce killing them when server must be stopped.
server.on('connection', connections.onNewConnection);

[
	'SIGHUP',
	'SIGINT',
	'SIGQUIT',
	'SIGILL',
	'SIGTRAP',
	'SIGABRT',
	'SIGBUS',
	'SIGFPE',
	'SIGUSR1',
	'SIGSEGV',
	'SIGUSR2',
	'SIGTERM'
].forEach(signal => process.once(signal, onServerSignal));

/**
 * Net server
 *
 * @typedef external:net.Server
 * @see {@link https://nodejs.org/api/net.html#net_class_net_server}
 */

/**
 * Output some info about server that's listening.
 *
 * @private
 * @this external:net.Server
 */
function onServerListening () {
	const address = this.address();
	console.log(`Server is serving files from ${path.resolve(CONFIG.documentRoot)} waiting for connections on http://${CONFIG.hostname || 'localhost'}:${address.port}/ - have fun!`);
}

/**
 * Quickly stop server on signal.
 *
 * @private
 * @param {string} signal
 */
function onServerSignal (signal) {
	console.log(`Got ${signal}, stopping server...`);
	server.close(() => {
		console.log('Server stopped. Bye!');
		process.exit(0); // eslint-disable-line no-process-exit
	});

	connections.closeAll();
}
